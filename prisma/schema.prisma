// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MenuItem {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  description String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  orders     OrderItem[]
  
  @@map("menu_items")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(100)
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  menuItems MenuItem[]
  
  @@map("categories")
}

model Order {
  id          Int         @id @default(autoincrement())
  customerName String     @db.VarChar(255)
  customerEmail String?   @db.VarChar(255)
  customerPhone String?   @db.VarChar(20)
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  orderItems OrderItem[]
  tableId    Int?
  table      Table?      @relation(fields: [tableId], references: [id])
  
  @@map("orders")
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  quantity    Int      @default(1)
  price       Decimal  @db.Decimal(10, 2)
  specialRequest String?
  createdAt   DateTime @default(now())
  
  // Relations
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  
  @@map("order_items")
}

model Table {
  id          Int      @id @default(autoincrement())
  number      Int      @unique
  capacity    Int
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders Order[]
  
  @@map("tables")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}